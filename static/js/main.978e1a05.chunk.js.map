{"version":3,"sources":["components/LoginForm/logo.svg","components/auth/authReducer.js","components/Carousel/CarouselReducer.js","store.js","components/auth/authActions.js","components/Carousel/CarouselActions.js","components/Button/Button.js","components/Header/Header.js","components/LoginForm/LoginForm.js","screens/LoginScreen/LoginScreen.js","components/Carousel/CarouselItem.js","components/Carousel/Carousel.js","screens/CarouselScreen/CarouselScreen.js","screens/pageNotFoundScreen/pageNotFoundScreen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","defaultState","isAuthenticated","authError","length","history","rootReducer","combineReducers","auth","state","action","type","payload","error","carousel","form","formReducer","modalIsOpen","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","props","className","children","connect","dispatch","dispatchLogout","logout","onClick","to","reduxForm","onSubmit","handleSubmit","src","logo","alt","Field","name","component","placeholder","disabled","pristine","submitting","invalid","dispatchLoginSuccess","loginSuccess","dispatchLoginError","loginError","useHistory","values","username","password","push","item","spelled","filteredOptions","responsive","desktop","breakpoint","max","min","items","tablet","mobile","showDots","arrows","containerClass","itemClass","map","o","CarouselItem","key","numeric","Modal","setAppElement","options","Array","from","config","numberOfOptions","_","i","_capitalize","convertor","toWords","carouselLength","dispatchSlideSelected","slideSelected","dispatchOpenModal","openModal","dispatchCloseModal","closeModal","slice","value","onChange","e","target","n","isOpen","onRequestClose","contentLabel","style","overlay","zIndex","content","margin","textAlign","shouldCloseOnEsc","display","h","App","exact","path","CarouselScreen","LoginScreen","pageNotFoundScreen","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","store","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.978e1a05.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import {\n  LOGIN_TRY,\n  LOGIN_SUCCESS,\n  LOGIN_ERROR,\n  LOGOUT\n} from './authActions';\n\nconst defaultState = {\n  isAuthenticated: false,\n  authError: null\n};\n\nexport default (state = defaultState, action) => {\n  switch (action.type) {\n    case LOGIN_TRY:\n      return defaultState;\n    case LOGIN_SUCCESS:\n      return {\n        isAuthenticated: true,\n        authError: null\n      }\n    case LOGIN_ERROR:\n      return {\n        isAuthenticated: false,\n        authError: action.payload.error\n      }\n    case LOGOUT:\n      return defaultState;\n    case '@@redux-form/CHANGE':\n      return {\n        ...state,\n        authError: null\n      }\n    default:\n      return state;\n  }\n}","import {\n  SLIDE_SELECTED,\n} from './CarouselActions';\n\nconst defaultState = {\n  length: 0,\n  history: []\n};\n\nexport default (state = defaultState, action) => {\n  switch (action.type) {\n    case SLIDE_SELECTED:\n      if (action.payload.length) {\n        return {\n          length: action.payload.length,\n          history: [ ...state.history, action.payload.length ]\n        };\n      }\n      return {\n        length: 0,\n        history: state.history\n      };\n    default:\n      return state;\n  }\n}","import { createStore, combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\n\nimport authReducer from './components/auth/authReducer';\nimport CarouselReducer from './components/Carousel/CarouselReducer';\n\nimport {\n  OPEN_MODAL,\n  CLOSE_MODAL\n} from './components/Carousel/CarouselActions';\n\nconst modalIsOpenReducer = (state = false, action) => {\n  switch(action.type) {\n    case OPEN_MODAL:\n      return true;\n    case CLOSE_MODAL:\n      return false;\n    default:\n      return state;\n  }\n};\n\nconst rootReducer = combineReducers({\n  auth: authReducer,\n  carousel: CarouselReducer,\n  form: formReducer,\n  modalIsOpen: modalIsOpenReducer\n});\n\nexport default createStore(rootReducer, /* preloadedState, */\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n","export const LOGIN_TRY = 'LOGIN_TRY';\nexport const loginTry = (payload) => ({\n  type: LOGIN_TRY,\n  payload\n});\n\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const loginSuccess = (payload) => ({\n  type: LOGIN_SUCCESS,\n  payload\n});\n\nexport const LOGIN_ERROR = 'LOGIN_ERROR';\nexport const loginError = (payload) => ({\n  type: LOGIN_ERROR,\n  payload\n});\n\nexport const LOGOUT = 'LOGOUT';\nexport const logout = (payload) => ({\n  type: LOGOUT,\n  payload\n});\n","export const SLIDE_SELECTED = 'SLIDE_SELECTED';\nexport const OPEN_MODAL = 'OPEN_MODAL';\nexport const CLOSE_MODAL = 'CLOSE_MODAL';\n\nexport const slideSelected = (payload) => ({\n  type: SLIDE_SELECTED,\n  payload\n});\n\nexport const openModal = (payload) => ({\n  type: OPEN_MODAL,\n  payload\n});\n\nexport const closeModal = (payload) => ({\n  type: CLOSE_MODAL,\n  payload\n});\n","import React from 'react'\nimport './Button.css'\n\nexport default (props) => (\n  <button { ...props } className={ `Button ${props.className}`}>\n    { props.children }\n  </button>\n);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport Button from '../Button/Button';\nimport { logout } from '../auth/authActions';\nimport './Header.css';\n\nconst Header = (props) => {\n  const { isAuthenticated, dispatchLogout } = props;\n  const logoutClicked = () => {\n    dispatchLogout();\n  };\n  \n  return (\n    <header className=\"Header\">\n      { isAuthenticated ? \n        <Button\n          className=\"Header_Button\"\n          onClick={logoutClicked}\n        >\n          Logout\n        </Button> \n        : null\n      }\n      <Link \n        className=\"Header_Heading\"\n        to=\"/\"\n      >\n        <h3>Matrimony.com</h3>\n      </Link>\n    </header>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  isAuthenticated: state.auth.isAuthenticated\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchLogout: (payload) => dispatch(logout(payload))\n});\n\nexport default connect( mapStateToProps , mapDispatchToProps)(Header);\n","import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nimport Button from '../Button/Button';\nimport logo from './logo.svg';\nimport './LoginForm.css';\n\nconst LoginForm = (props) => (\n  <form onSubmit={props.handleSubmit}>\n    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    <div className=\"LoginForm_InputGroup\">\n      <label className=\"LoginForm_Label\">Username</label>\n      <span>\n        <Field\n          name=\"username\"\n          component=\"input\"\n          type=\"text\"\n          placeholder=\"shaadi\"\n        />\n      </span>\n    </div>\n    <div className=\"LoginForm_InputGroup\">\n      <label className=\"LoginForm_Label\">Password</label>\n      <span>\n        <Field\n          name=\"password\"\n          component=\"input\"\n          type=\"password\"\n          placeholder=\"123\"\n        />\n      </span>\n    </div>\n    <Button type=\"submit\" disabled={props.pristine || props.submitting || props.invalid}>\n      Submit\n    </Button>\n    { props.authError ? <p className=\"LoginForm_Error\">{ props.authError }</p> : null }\n  </form>\n);\n\nexport default reduxForm({\n  form: 'login' // a unique identifier for this form\n})(LoginForm);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect, useHistory } from 'react-router-dom';\n\nimport LoginForm from '../../components/LoginForm/LoginForm';\nimport { loginSuccess, loginError } from '../../components/auth/authActions';\n\nconst LoginScreen = (props) => {\n  const {\n    isAuthenticated,\n    authError,\n    dispatchLoginSuccess,\n    dispatchLoginError\n  } = props;\n  let history = useHistory();\n\n  const simulateLogin = (values) => {\n    const {username, password} = values;\n\n    // should call api via saga here but only front end demo for now\n    if (username==='shaadi' && password==='123') {\n      dispatchLoginSuccess();\n      history.push('/carousel');\n    } else {\n      dispatchLoginError({error: 'invalid credentials'})\n    }\n  };\n\n  return isAuthenticated ? <Redirect to=\"/carousel\" /> \n    : <LoginForm authError={authError} onSubmit={simulateLogin}/>;\n}\n\nconst mapStateToProps = (state) => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  authError: state.auth.authError\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchLoginSuccess: (payload) => dispatch(loginSuccess(payload)),\n  dispatchLoginError: (payload) => dispatch(loginError(payload))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginScreen);","import React from 'react';\n\nexport default (props) => <div> {props.item.spelled} </div>;\n","import React from 'react';\nimport 'react-multi-carousel/lib/styles.css';\nimport Carousel from 'react-multi-carousel';\n\nimport CarouselItem from './CarouselItem';\nimport './Carousel.css'\n\nexport default (props) => {\n  const {\n    filteredOptions = []\n  } = props;\n\n  const responsive ={\n    desktop: {\n      breakpoint: { max: 3000, min: 1024 },\n      items: 5,\n    },\n    tablet: {\n      breakpoint: { max: 1024, min: 464 },\n      items: 3,\n    },\n    mobile: {\n      breakpoint: { max: 464, min: 0 },\n      items: 1,\n    }\n  }\n\n  return (\n    <Carousel\n      responsive={ responsive }\n      showDots={ false }\n      arrows\n      containerClass=\"Carousel_Container\"\n      itemClass=\"Carousel_Item\"\n    >\n      { filteredOptions\n        // .filter(o => o.numeric <= carouselLength)\n        .map(o => <CarouselItem key={ o.numeric } item={ o } />) \n      }\n    </Carousel>\n  );\n}","import React from 'react';\nimport convertor from 'number-to-words';\nimport _capitalize from 'lodash/capitalize';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport Modal from 'react-modal';\n\n// import options from '../../constants/options'; // deprecated for building via config\nimport config from '../../config/config.json';\nimport Carousel from '../../components/Carousel/Carousel';\nimport Button from '../../components/Button/Button';\nimport { slideSelected, openModal, closeModal } from '../../components/Carousel/CarouselActions';\nimport './CarouselScreen.css'\n\nModal.setAppElement('#root');\n\nconst optionsNumberArray = Array.from({length: config.numberOfOptions}, (_, i) => i + 1);\n\nconst options = optionsNumberArray.map(\n  i => ({\n    numeric: i,\n    spelled: _capitalize(convertor.toWords(i))\n  })\n);\n\nconst CarouselScreen = (props) => {\n  const {\n    isAuthenticated,\n    dispatchSlideSelected,\n    carouselLength,\n    modalIsOpen,\n    history,\n    dispatchOpenModal,\n    dispatchCloseModal\n  } = props;\n\n  // const filteredOptions = options;\n  const filteredOptions = options.slice(0, carouselLength);\n\n  return !isAuthenticated ? <Redirect to=\"/\" /> :\n  (<div className=\"CarouselScreen\">\n    <div className=\"CarouselScreen_Dropdown\">\n      <label className=\"CarouselScreen_Label\">Select slides</label>\n      <select\n        className=\"CarouselScreen_Select\"\n        value={ carouselLength }\n        onChange={(e) => dispatchSlideSelected({length: e.target.value})}\n      >\n        <option key=\"0\" />\n        { options.map(n => <option key={n.numeric}>{n.numeric}</option>) }\n      </select>\n    </div>\n    <Carousel key={carouselLength} filteredOptions={filteredOptions}/>\n    <Button onClick={ dispatchOpenModal }>Finish</Button>\n    <Modal\n      isOpen={ modalIsOpen }\n      onRequestClose={ dispatchCloseModal }\n      contentLabel=\"History Modal\"\n      style={{ overlay: { zIndex: '1001' }, content: { margin: 'auto', textAlign: 'center'} }}\n      shouldCloseOnEsc\n    >\n      <div style={{ margin: 'auto' }}>\n        <span><h3 style={{ display: 'inline-block'}}>History Modal</h3></span>\n        <span><Button onClick={ dispatchCloseModal }>Close Modal</Button></span>\n      </div>\n      <ul>\n        { history.map((h, i) => <li key={ i }>{ h }</li>) }\n      </ul>\n    </Modal>\n  </div>);\n};\n\nconst mapStateToProps = (state) => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  carouselLength: state.carousel.length,\n  modalIsOpen: state.modalIsOpen,\n  history: state.carousel.history\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchSlideSelected: (payload) => dispatch(slideSelected(payload)),\n  dispatchOpenModal: (payload) => dispatch(openModal(payload)),\n  dispatchCloseModal: (payload) => dispatch(closeModal(payload))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CarouselScreen)","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default () => (\n  <p> Page not found!  Go to <Link to=\"/\">home</Link></p>\n);\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport Header from './components/Header/Header';\nimport LoginScreen from './screens/LoginScreen/LoginScreen';\nimport CarouselScreen from './screens/CarouselScreen/CarouselScreen';\nimport pageNotFoundScreen from './screens/pageNotFoundScreen/pageNotFoundScreen';\nimport './App.css';\n\nconst App = () => {\n\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Header />\n        <Switch>\n          <Route exact path=\"/carousel\" component={ CarouselScreen } />\n          <Route exact path=\"/test\">\n            <div> TEST </div>\n          </Route>\n          <Route exact path=\"/\" component={ LoginScreen } />\n          <Route component={pageNotFoundScreen} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}